var fs = require('fs');
var products = require('../data.json');
var fakerator = require("fakerator")('en-CA');

/**
 * @swagger
 *  components:
 *      schemas:
 *          Product:
 *              type: object
 *              required:
 *                  - productId
 *                  - productName
 *                  - productOwnerName
 *                  - Developers
 *                  - scrumMasterName
 *                  - startDate
 *                  - methodology
 *              properties:
 *                  productId:
 *                      type: String
 *                      description: Autogenerated id of the product (generated by fakerator)
 *                  productName:
 *                      type: String
 *                      description: The product name
 *                  productOwnerName:
 *                      type: String
 *                      description: The product owner's name
 *                  Developers:
 *                      type: Array
 *                      description: The developers working on the product
 *                  scrumMasterName:
 *                      type: String
 *                      description: The scrum master's name
 *                  startDate:
 *                      type: Date
 *                      description: The start date
 *                  methodology:
 *                      type: String
 *                      description: The type of methodology used
 *              example:
 *                  productId: 2871461e-8b8a-4a28-b487-a6ac1e88228b
 *                  productName: Perry Alley
 *                  productOwnerName: James Kris
 *                  Developers: [Alvin Lemke]
 *                  scrumMasterName: Terence Vandervort
 *                  startDate: 2022/10/17
 *                  methodology: Agile
 */

/**
 * @swagger
 * /products: 
 *  get:
 *      summary: Returns the list of all products
 *      tags: [Products]
 *      responses:
 *          200:
 *              description: List of all products.
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: array
 *                          items:
 *                              $ref: '#/components/schemas/Product'
 *          400:
 *              description: Bad Request. Unable to retrieve all products.
 *  
*/
//returns all the products
const getAllProducts = async(req,res) => {
    try {
        res.status(200).json(products);
    } catch (e) {
        console.error(e.message);
        res.status(400).send('Bad Request. Unable to retrieve all products.');
    }
}

/**
 * @swagger
 * /product/{productId}:
 *  get:
 *      summary: Retrieves product data based on productId
 *      tags: [Products]
 *      parameters:
 *        - in: path
 *          name: productId
 *          schema:
 *              type: string
 *          required: true
 *          description: Product id
 *      responses:
 *          200:
 *              description: The product data associated with the productId.
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Product'
 *          400:
 *              description: Bad Request. Product was not found.
 */
//returns specific product based on productId
const getProductById = async(req, res) => {
    try {
        res.status(200).json(products.filter((product) => product.productId == req.params.productId));
    } catch (e) {
        console.error(e.message);
        res.status(400).send('Bad Request. Product was not found.');
    }
}

/**
 * @swagger
 * /product/{productId}:
 *  put:
 *      summary: Updates the product based on productId
 *      tags: [Products]
 *      parameters:
 *          - in: path
 *            name: productId
 *            schema:
 *              type: string
 *            required: true
 *            description: Product id
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/Product'
 *      responses:
 *          200:
 *              description: The product was updated successfully.
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Product'
 *          400:
 *              description: Bad Request. The message in the body of the request is either missing or malformed.
 */
//update product based on the product id and updates the data.json file 
const updateProduct = async(req, res) => {
    try {
        let productIdx = products.findIndex((product) => product.productId == req.params.productId);
        products[productIdx] = req.body;
        fs.writeFileSync("data.json",JSON.stringify(products),"utf-8");
        res.status(201).json(products[productIdx]);
    } catch (e) {
        console.error(e.message);
        res.status(400).send('Bad Request. The message in the body of the request is either missing or malformed.');
    }
}
/**
 * @swagger
 * /products:
 *  post:
 *      summary: Creates a new product
 *      tags: [Products]
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/Product'
 *                  example:
 *                      productName: Perry Alley
 *                      productOwnerName: James Kris
 *                      Developers: [Alvin Lemke]
 *                      scrumMasterName: Terrence Vandervort
 *                      startDate: 2022/10/17
 *                      methodology: Agile
 *      responses:
 *          200:
 *              description: The product was successfully created.
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Product'
 *          400:
 *              description: Bad Request. The message in the body of the request is either missing or malformed.
 */
//appends the data.json file with the newly added product data based on user input
const addProduct = async(req, res) => {
    try {
        let product = { productId:  fakerator.misc.uuid(), ...req.body}
        products.push(product);
        fs.writeFileSync("data.json",JSON.stringify(products),"utf-8");
        res.status(201).send(products);
    } catch (e) {
        console.error(e.message);
        res.status(400).send('Bad Request. The message in the body of the request is either missing or malformed.');
    }
}
/**
 * @swagger
 * /products/search:
 *  post:
 *      summary: Returns the products based on user's filter and search
 *      tags: [Products]
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/Product'
 *                  example:
 *                      search: Terrence Vandervort
 *                      filter: SCRUM
 *      responses:
 *          200:
 *              description: Successfully returned all the plants information matching the developer or scrum master name.
 *              content:
 *                  application/json:
 *                      schema:
 *                          $ref: '#/components/schemas/Product'
 *          400:
 *              description: Bad Request. Product(s) not found based on search.
 */
//returns all products with the specified scrum master or developer name (based on filter)
const searchProducts = async(req, res) => {
    try {
        let filteredProducts = [];
        //returns the products that has the user input for filter as the scrumMasterName
        if ((req.body.filter).toUpperCase() == 'SCRUM') {
            filteredProducts = products.filter(product => {
                return ((product.scrumMasterName).toLowerCase().indexOf((req.body.search).toLowerCase()) > -1);
            });
        //returns the products that has the user input for filter as the developer
        } else if ((req.body.filter).toUpperCase() == 'DEV') {
            products.filter(product => {
                product.Developers.some((developer)=> {
                    if (developer.toLowerCase().indexOf((req.body.search).toLowerCase()) > -1) {
                        filteredProducts.push(product);
                    }
                })
            });
        }
        res.status(200).json(filteredProducts);
    } catch (e) {
        console.error(e.message);
        res.status(400).send('Bad Request. Product(s) not found based on search.');
    }
}

module.exports = {
    getAllProducts,
    getProductById,
    updateProduct,
    addProduct,
    searchProducts,
}